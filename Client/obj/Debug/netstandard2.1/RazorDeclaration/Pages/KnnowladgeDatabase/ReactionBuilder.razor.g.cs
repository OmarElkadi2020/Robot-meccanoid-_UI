#pragma checksum "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\Pages\KnnowladgeDatabase\ReactionBuilder.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a7390aa247b0cde122bb4065b836ac3782a4183b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace MeccaUI_THDxIOT.Client.Pages.KnnowladgeDatabase
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using MeccaUI_THDxIOT.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using MeccaUI_THDxIOT.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using MeccaUI_THDxIOT.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\_Imports.razor"
using MeccaUI_THDxIOT.Client.Pages.RobotControlling;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ReactionBuilder/{ReactionID:long}")]
    public partial class ReactionBuilder : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 1071 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\Pages\KnnowladgeDatabase\ReactionBuilder.razor"
 
    string[] EmotionalCondition = new[]
        {
            "Happy",
            "Sad",
            null,
        };

    string AnnimationState = "Capturing";

    int RotatAll_X = 0;
    int RotatAll_Y = 20;
    int RotatAll_Z = 0;

    int[] LeftArm_BackShoulder_RotationSteps_Array;
    int[] LeftArm_SideShoulder_RotationSteps_Array;
    int[] LeftArm_ForeArm_RotationSteps_Array;

    int[] RightArm_BackShoulder_RotationSteps_Array;
    int[] RightArm_SideShoulder_RotationSteps_Array;
    int[] RightArm_ForeArm_RotationSteps_Array;

    [Parameter]
    public long ReactionID { get; set; }

    public Reaction reaction { get; set; }

    public ReactionStep ReactionStep { get; set; } = new ReactionStep();

    public LinkedList<MotorState> movement { get; set; } = new LinkedList<MotorState>();

    private string TextToSpeak { get; set; }

    private byte StepOrder { get; set; } = 0;

    private MotorState LeftArm_BackShoulder { set; get; }

    private MotorState LeftArm_SideShoulder { set; get; }

    private MotorState LeftArm_ForeArm { set; get; }

    private MotorState RightArm_BackShoulder { set; get; }

    private MotorState RightArm_SideShoulder { set; get; }

    private MotorState RightArm_ForeArm { set; get; }

    protected async override Task OnInitializedAsync()
    {


        ConfigureTostar();

        InitializeGlobalVariables();


        if (ReactionID != 0) //Edit Reaction already in the DB
        {
            reaction = await GetTheReaction();

            foreach (var step in reaction.ReactionSteps)
            {
                LeftArm_BackShoulder_RotationSteps_Array[StepOrder] =
                                    step.Movement.Where(m => m.Motor == Motor.BackShoulder_LA).First().RotationAngel;

                LeftArm_SideShoulder_RotationSteps_Array[StepOrder] =
                                    step.Movement.Where(m => m.Motor == Motor.SideShoulder_LA).First().RotationAngel;


                LeftArm_ForeArm_RotationSteps_Array[StepOrder] =
                                    step.Movement.Where(m => m.Motor == Motor.ForeArm_LA).First().RotationAngel;

                RightArm_BackShoulder_RotationSteps_Array[StepOrder] =
                                    step.Movement.Where(m => m.Motor == Motor.BackShoulder_RA).First().RotationAngel;

                RightArm_SideShoulder_RotationSteps_Array[StepOrder] =
                                    step.Movement.Where(m => m.Motor == Motor.SideShoulder_RA).First().RotationAngel;

                RightArm_ForeArm_RotationSteps_Array[StepOrder] =
                                    step.Movement.Where(m => m.Motor == Motor.ForeArm_RA).First().RotationAngel;
                StepOrder++;

            }

        }


        Console.WriteLine("reactionID: " + reaction.ReactionID);


    }



    void Capture()
    {


        movement = new LinkedList<MotorState>();

        int index = LeftArm_BackShoulder_RotationSteps_Array.IndexOf(0);
        if (index > 10)
        {
            Toaster.Add("No You Cannot add movements anymore", MatToastType.Warning, "Max length", "Warning", config => config.RequireInteraction = true);
            return;
        }

        LeftArm_BackShoulder_RotationSteps_Array[index] = LeftArm_BackShoulder.RotationAngel + 1;


        LeftArm_SideShoulder_RotationSteps_Array[index] = LeftArm_SideShoulder.RotationAngel + 1;

        LeftArm_ForeArm_RotationSteps_Array[index] = LeftArm_ForeArm.RotationAngel + 1;



        RightArm_BackShoulder_RotationSteps_Array[index] = RightArm_BackShoulder.RotationAngel + 1;

        RightArm_SideShoulder_RotationSteps_Array[index] = RightArm_SideShoulder.RotationAngel + 1;


        RightArm_ForeArm_RotationSteps_Array[index] = RightArm_ForeArm.RotationAngel + 1;



        movement.AddLast(new MotorState(LeftArm_BackShoulder.Motor, LeftArm_BackShoulder.RotationAngel));
        movement.AddLast(new MotorState(LeftArm_SideShoulder.Motor, LeftArm_SideShoulder.RotationAngel));
        movement.AddLast(new MotorState(LeftArm_ForeArm.Motor, LeftArm_ForeArm.RotationAngel));
        movement.AddLast(new MotorState(RightArm_BackShoulder.Motor, RightArm_BackShoulder.RotationAngel));
        movement.AddLast(new MotorState(RightArm_SideShoulder.Motor, RightArm_SideShoulder.RotationAngel));
        movement.AddLast(new MotorState(RightArm_ForeArm.Motor, RightArm_ForeArm.RotationAngel));

        ReactionStep = new ReactionStep(movement, ReactionStep.TextToSpeak, StepOrder);

        StepOrder++;
        reaction.ReactionSteps.AddLast(ReactionStep);

        ReactionStep.TextToSpeak = null;

        Toaster.Add($"Captured! Click Animate to Review", MatToastType.Primary, "Successed", "thumb_up");

    }

    void Switch()
    {
        if (AnnimationState == "running") {
            AnnimationState = "Capturing";
            Toaster.Clear();
            Toaster.Add("Click Animate to start Animation mode", MatToastType.Info, "Capturing Mode", "", config =>
            {

                config.RequireInteraction = true; config.ShowProgressBar = false; config.ShowCloseButton = false;
            });
        }
        else {
            AnnimationState = "running";
            Toaster.Clear();
            Toaster.Add("Click Stop to Back to Capturing mode", MatToastType.Info, "Animation Mode", "", config => {

                config.RequireInteraction = true; config.ShowProgressBar = false; config.ShowCloseButton = false;
            });
        }
    }

    void Reset()
    {
        Array.Clear(LeftArm_BackShoulder_RotationSteps_Array, 0, LeftArm_BackShoulder_RotationSteps_Array.Length);
        Array.Clear(LeftArm_SideShoulder_RotationSteps_Array, 0, LeftArm_SideShoulder_RotationSteps_Array.Length);
        Array.Clear(LeftArm_ForeArm_RotationSteps_Array, 0, LeftArm_ForeArm_RotationSteps_Array.Length);

        Array.Clear(RightArm_BackShoulder_RotationSteps_Array, 0, RightArm_BackShoulder_RotationSteps_Array.Length);
        Array.Clear(RightArm_SideShoulder_RotationSteps_Array, 0, RightArm_SideShoulder_RotationSteps_Array.Length);
        Array.Clear(RightArm_ForeArm_RotationSteps_Array, 0, RightArm_ForeArm_RotationSteps_Array.Length);

        LeftArm_BackShoulder.RotationAngel = 0;
        LeftArm_SideShoulder.RotationAngel = 0;
        LeftArm_ForeArm.RotationAngel = 0;
        RightArm_BackShoulder.RotationAngel = 0;
        RightArm_SideShoulder.RotationAngel = 0;
        RightArm_ForeArm.RotationAngel = 0;
    }

    private async Task save()
    {
       
            //if (reaction.ReactionID != 0) //Edit
            //{
            //    var ID = reaction.ReactionID;
            //    var res = await Http.PutAsJsonAsync($"api/Reactions/{ID}", reaction);
            //    if (res.IsSuccessStatusCode)
            //        Toaster.Add($"The Reaction \"{reaction.ReactionName}\" has been updated Successfully", MatToastType.Info, "Successed", "thumb_up");
            //}
            //Create new

            var res = await Http.PostAsJsonAsync($"api/Reactions", reaction);
            if (res.IsSuccessStatusCode)
                Toaster.Add($"New Reaction \"{reaction.ReactionName}\" has been created Successfully", MatToastType.Success, "Successed", "thumb_up");


        NavigationManager.NavigateTo("Reactions");
    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 1276 "C:\Users\OmarElkadi\source\repos\MeccaUI_THDxIOT\Client\Pages\KnnowladgeDatabase\ReactionBuilder.razor"
      
    void ConfigureTostar()
    {
        Toaster.Configuration.ShowProgressBar = true;
        Toaster.Configuration.ShowCloseButton = true;
        Toaster.Configuration.MaximumOpacity = 100;
        Toaster.Configuration.ShowTransitionDuration = 500; ;
        Toaster.Configuration.VisibleStateDuration = 7000;
        Toaster.Configuration.HideTransitionDuration = 500;
        Toaster.Configuration.RequireInteraction = false;
        Toaster.Configuration.MaxDisplayedToasts = 2;
    }

    void InitializeGlobalVariables()
    {
        LeftArm_BackShoulder_RotationSteps_Array = new int[11];
        LeftArm_SideShoulder_RotationSteps_Array = new int[11];
        LeftArm_ForeArm_RotationSteps_Array = new int[11];
        RightArm_BackShoulder_RotationSteps_Array = new int[11];
        RightArm_SideShoulder_RotationSteps_Array = new int[11];
        RightArm_ForeArm_RotationSteps_Array = new int[11];

        LeftArm_BackShoulder = new MotorState(Motor.BackShoulder_LA);
        LeftArm_SideShoulder = new MotorState(Motor.SideShoulder_LA);
        LeftArm_ForeArm = new MotorState(Motor.ForeArm_LA);
        RightArm_BackShoulder = new MotorState(Motor.BackShoulder_RA);
        RightArm_SideShoulder = new MotorState(Motor.SideShoulder_RA);
        RightArm_ForeArm = new MotorState(Motor.ForeArm_RA);

        reaction = new Reaction();
    }
    async Task<Reaction> GetTheReaction()
    {
        return await Http.GetFromJsonAsync<Reaction>($"api/Reactions/{ReactionID}");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
