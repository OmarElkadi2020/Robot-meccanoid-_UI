// <auto-generated />
using System;
using MeccaUI_THDxIOT.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeccaUI_THDxIOT.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.ChargeRecord", b =>
                {
                    b.Property<long>("ChargeRecord_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChargeLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeOfRecord")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCharging")
                        .HasColumnType("bit");

                    b.HasKey("ChargeRecord_ID");

                    b.ToTable("ChargeRecord");

                    b.HasData(
                        new
                        {
                            ChargeRecord_ID = 1L,
                            ChargeLevel = 50,
                            DateTimeOfRecord = new DateTime(2020, 6, 16, 6, 15, 49, 269, DateTimeKind.Local).AddTicks(5127),
                            IsCharging = true
                        },
                        new
                        {
                            ChargeRecord_ID = 2L,
                            ChargeLevel = 20,
                            DateTimeOfRecord = new DateTime(2020, 6, 16, 8, 15, 49, 269, DateTimeKind.Local).AddTicks(5884),
                            IsCharging = false
                        },
                        new
                        {
                            ChargeRecord_ID = 3L,
                            ChargeLevel = 75,
                            DateTimeOfRecord = new DateTime(2020, 6, 16, 9, 15, 49, 269, DateTimeKind.Local).AddTicks(5931),
                            IsCharging = true
                        });
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.MotorState", b =>
                {
                    b.Property<long>("MotorStateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Motor")
                        .HasColumnType("int");

                    b.Property<long>("ReactionStepID")
                        .HasColumnType("bigint");

                    b.Property<int>("RotationAngel")
                        .HasColumnType("int");

                    b.Property<byte>("RotationOrder")
                        .HasColumnType("tinyint");

                    b.HasKey("MotorStateID");

                    b.HasIndex("ReactionStepID");

                    b.ToTable("MotorStates");

                    b.HasData(
                        new
                        {
                            MotorStateID = 1L,
                            Motor = 0,
                            ReactionStepID = 1L,
                            RotationAngel = 90,
                            RotationOrder = (byte)0
                        },
                        new
                        {
                            MotorStateID = 2L,
                            Motor = 1,
                            ReactionStepID = 1L,
                            RotationAngel = 90,
                            RotationOrder = (byte)0
                        },
                        new
                        {
                            MotorStateID = 3L,
                            Motor = 2,
                            ReactionStepID = 1L,
                            RotationAngel = 90,
                            RotationOrder = (byte)0
                        },
                        new
                        {
                            MotorStateID = 4L,
                            Motor = 3,
                            ReactionStepID = 1L,
                            RotationAngel = 90,
                            RotationOrder = (byte)0
                        },
                        new
                        {
                            MotorStateID = 5L,
                            Motor = 4,
                            ReactionStepID = 1L,
                            RotationAngel = 90,
                            RotationOrder = (byte)0
                        },
                        new
                        {
                            MotorStateID = 6L,
                            Motor = 5,
                            ReactionStepID = 1L,
                            RotationAngel = 90,
                            RotationOrder = (byte)0
                        });
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.Reaction", b =>
                {
                    b.Property<long>("ReactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmotionalCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("ReactionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReactionID");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            ReactionID = 1L,
                            IsDefault = true,
                            ReactionName = "I Love You Too"
                        },
                        new
                        {
                            ReactionID = 2L,
                            EmotionalCondition = "Happy",
                            IsDefault = false,
                            ReactionName = "1 Years Old"
                        },
                        new
                        {
                            ReactionID = 3L,
                            EmotionalCondition = "sad",
                            IsDefault = false,
                            ReactionName = "Of Course"
                        });
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.ReactionStep", b =>
                {
                    b.Property<long>("ReactionStepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ReactionID")
                        .HasColumnType("bigint");

                    b.Property<byte>("StepOrder")
                        .HasColumnType("tinyint");

                    b.Property<string>("TextToSpeak")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReactionStepID");

                    b.HasIndex("ReactionID");

                    b.ToTable("ReactionSteps");

                    b.HasData(
                        new
                        {
                            ReactionStepID = 1L,
                            ReactionID = 1L,
                            StepOrder = (byte)1,
                            TextToSpeak = "I Love You Too"
                        },
                        new
                        {
                            ReactionStepID = 2L,
                            ReactionID = 1L,
                            StepOrder = (byte)2,
                            TextToSpeak = "1 Years Old"
                        },
                        new
                        {
                            ReactionStepID = 3L,
                            ReactionID = 1L,
                            StepOrder = (byte)3,
                            TextToSpeak = "Of Course"
                        });
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.Trigger", b =>
                {
                    b.Property<long>("TriggerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioTextTrigger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenseTrigger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TriggerID");

                    b.ToTable("Triggers");

                    b.HasData(
                        new
                        {
                            TriggerID = 1L,
                            AudioTextTrigger = "I Love You Meccano",
                            TriggerName = "I Love You",
                            TriggerType = "Audio"
                        },
                        new
                        {
                            TriggerID = 2L,
                            AudioTextTrigger = "How is your Age",
                            SenseTrigger = "Swapping",
                            TriggerName = "Age Question",
                            TriggerType = "Mixed"
                        },
                        new
                        {
                            TriggerID = 3L,
                            AudioTextTrigger = "do you like me",
                            TriggerName = "do you like me",
                            TriggerType = "Audio"
                        });
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.TriggersReactions", b =>
                {
                    b.Property<long>("TriggerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReactionID")
                        .HasColumnType("bigint");

                    b.HasKey("TriggerId", "ReactionID");

                    b.HasIndex("ReactionID");

                    b.ToTable("triggersReactions");
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.VolumeRecord", b =>
                {
                    b.Property<long>("VolumeRecod_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VolumeLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("ateTimeOfRecord")
                        .HasColumnType("datetime2");

                    b.HasKey("VolumeRecod_ID");

                    b.ToTable("VolumeRecord");

                    b.HasData(
                        new
                        {
                            VolumeRecod_ID = 1L,
                            VolumeLevel = 50,
                            ateTimeOfRecord = new DateTime(2020, 6, 16, 6, 15, 49, 263, DateTimeKind.Local).AddTicks(3390)
                        },
                        new
                        {
                            VolumeRecod_ID = 2L,
                            VolumeLevel = 20,
                            ateTimeOfRecord = new DateTime(2020, 6, 16, 8, 15, 49, 267, DateTimeKind.Local).AddTicks(5024)
                        },
                        new
                        {
                            VolumeRecod_ID = 3L,
                            VolumeLevel = 75,
                            ateTimeOfRecord = new DateTime(2020, 6, 16, 9, 15, 49, 267, DateTimeKind.Local).AddTicks(5115)
                        });
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.MotorState", b =>
                {
                    b.HasOne("MeccaUI_THDxIOT.Shared.Models.ReactionStep", "reactionStep")
                        .WithMany("Movement")
                        .HasForeignKey("ReactionStepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.ReactionStep", b =>
                {
                    b.HasOne("MeccaUI_THDxIOT.Shared.Models.Reaction", "reaction")
                        .WithMany("ReactionSteps")
                        .HasForeignKey("ReactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeccaUI_THDxIOT.Shared.Models.TriggersReactions", b =>
                {
                    b.HasOne("MeccaUI_THDxIOT.Shared.Models.Reaction", "Reaction")
                        .WithMany("TriggersReactions")
                        .HasForeignKey("ReactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeccaUI_THDxIOT.Shared.Models.Trigger", "Trigger")
                        .WithMany("TriggersReactions")
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
